package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Osci;
import com.example.jdbcdemo.domain.Ryby;

public class OsciManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableOsci = "CREATE TABLE Osci(id bigint GENERATED BY DEFAULT AS IDENTITY, nazwa varchar(20), dlugosc double, grubosc double, ryba_id bigint)";

	private Statement statement;

	private PreparedStatement addOsciStmt;
	private PreparedStatement deleteAllOsciStmt;
	private PreparedStatement getAllOsciStmt;
	private PreparedStatement updateOsciStmt;
	private PreparedStatement updateOsciStmt2;
	private PreparedStatement getOsciByRybaStmt;
	private PreparedStatement getOsciByIdStmt;

	public OsciManager() {

		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Osci".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableOsci);

			addOsciStmt = connection
					.prepareStatement("INSERT INTO Osci (nazwa,dlugosc,grubosc) VALUES (? ,? ,?)");

			deleteAllOsciStmt = connection.prepareStatement("DELETE FROM Osci");

			getAllOsciStmt = connection
					.prepareStatement("SELECT id,nazwa,dlugosc,grubosc, ryba_id FROM Osci");

			getOsciByRybaStmt = connection
					.prepareStatement("SELECT id,nazwa,dlugosc,grubosc, ryba_id FROM Osci WHERE ryba_id = ?");

			updateOsciStmt = connection
					.prepareStatement("UPDATE Osci SET ryba_id = ? WHERE id = ?");
			updateOsciStmt2 = connection
					.prepareStatement("UPDATE Osci SET ryba_id = null WHERE id = ?");

			getOsciByIdStmt = connection
					.prepareStatement("SELECT id,nazwa,dlugosc,grubosc, ryba_id FROM Osci WHERE id = ?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	public void clearOsci() {
		try {
			deleteAllOsciStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addOsci(Osci osci) {
		int count = 0;

		try {
			addOsciStmt.setString(1, osci.getNazwa());
			addOsciStmt.setDouble(2, osci.getDlugosc());
			addOsciStmt.setDouble(3, osci.getGrubosc());

			count = addOsciStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return count;
	}

	public int addOsciToRyba(Osci osci, Ryby ryba) {
		int count = 0;

		try {
			updateOsciStmt.setLong(1, ryba.getId());
			updateOsciStmt.setLong(2, osci.getId());

			count = updateOsciStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return count;
	}

	public int removeRybaFromOsci(Osci osci) {
		int count = 0;

		try {
			updateOsciStmt2.setLong(1, osci.getId());

			count = updateOsciStmt2.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return count;
	}

	public List<Osci> getAllOsci() {
		List<Osci> oscis = new ArrayList<Osci>();

		try {
			ResultSet rs = getAllOsciStmt.executeQuery();

			while (rs.next()) {
				Osci o = new Osci();
				o.setId(rs.getInt("id"));
				o.setNazwa(rs.getString("nazwa"));
				o.setDlugosc(rs.getDouble("dlugosc"));
				o.setGrubosc(rs.getDouble("grubosc"));
				o.setRyba_id(rs.getInt("ryba_id"));
				oscis.add(o);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return oscis;
	}

	public List<Osci> getOsciByRyba(Ryby ryba) {
		List<Osci> oscis = new ArrayList<Osci>();

		try {

			getOsciByRybaStmt.setLong(1, ryba.getId());

			ResultSet rs = getOsciByRybaStmt.executeQuery();

			while (rs.next()) {
				Osci o = new Osci();
				o.setId(rs.getInt("id"));
				o.setNazwa(rs.getString("nazwa"));
				o.setDlugosc(rs.getDouble("dlugosc"));
				o.setGrubosc(rs.getDouble("grubosc"));
				o.setRyba_id(rs.getInt("ryba_id"));
				oscis.add(o);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return oscis;
	}

	public Osci getOsciById(Osci osci) {
		Osci o = new Osci();
		try {
			getOsciByIdStmt.setLong(1, osci.getId());
			ResultSet rs = getOsciByIdStmt.executeQuery();
			rs.next();
			o.setId(rs.getInt("id"));
			o.setNazwa(rs.getString("nazwa"));
			o.setDlugosc(rs.getDouble("dlugosc"));
			o.setGrubosc(rs.getDouble("grubosc"));
			o.setRyba_id(rs.getInt("ryba_id"));
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return o;
	}
}
